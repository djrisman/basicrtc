'use strict';

var sendChannel = {};
var tesroom = document.getElementById("tesform");

//text editor variable
var documentArray = [];

//whiteboard variable
var whiteboardArray = [];
var backCanvasArray = [];
var allclientid = [];
var isChannelReady;
var isInitiator;
var isStarted;
var localStream;
var pc = {};
var remoteStream;
var turnReady;
var roomowner1;
var PeerTarget1;
var readyState = {};
var clientDetail = [];
var peerout;
var ClientConnect = false;
var myid;
var pc_config = 
  {'iceServers': [{'url': 'stun:stun.l.google.com:19302'},
{
    url: 'turn:192.158.29.39:3478?transport=udp',
    credential: 'JZEOEt2V3Qb0y27GRntt2u2PAYA=',
    username: '28224511:1379330808'
}
  ]};

var pc_constraints = {
  'optional': [
    {'DtlsSrtpKeyAgreement': true},
   // {'RtpDataChannels': true}
  ]};

// Set up audio and video regardless of what devices are present.
var sdpConstraints = {'mandatory': {
  'OfferToReceiveAudio':true,
  'OfferToReceiveVideo':true }};



/////////////////////////////////////////////

var room = location.pathname.substring(1);
if (room === '') {
room = prompt('Enter room name:');  
} 

var constraints = { "audio":true, "video": {
  "mandatory": {
   "maxWidth": "160",
   "maxHeight": "120",
  },
  "optional": [] }
};
var socket = io.connect();



if (room !== "") {
  console.log('Joining room ' + room);
  socket.emit('create or join', room);
  
}

 var localVideo = document.querySelector('#localVideo');

  getUserMedia(constraints, handleUserMedia, handleUserMediaError);


  
socket.on('created', function (room, roomowner){
  console.log('Created room ' + room);
  isInitiator = true;
  console.log('This peer is the initiator of room :' + room);
  roomowner1 = roomowner;
  console.log('room owner:' + roomowner1);
  isInitiator = true;
});

socket.on('full', function (room){
  console.log('Room ' + room + ' is full');
});


socket.on('join', function (room, PeerTarget){
  console.log('Another peer '+ PeerTarget+' made a request to join room ' + room);
   if (isInitiator) {
    socket.emit('roomowner', roomowner1, room);
    isStarted = false;
  };
  PeerTarget1 = PeerTarget;
  isChannelReady = true;
});

socket.on('roomowner', function(roomowner){
  console.log('client got roomowner: ' + roomowner);
  roomowner1 = roomowner;
});

socket.on('joined', function (room, yourid){
  console.log( yourid+'This peer has joined room ' + room);
  isChannelReady = true;
});

socket.on('log', function (array){
  console.log.apply(console, array);
});

socket.on('BecomeisInitiator', function(){ 
  isInitiator = true;
  console.log("THis peer become Initiator");
  isStarted = false;
});

socket.on('numClient', function (jumlahclient1){
  document.getElementById("jumlahClient").innerHTML = jumlahclient1 + " User Online";   
});

socket.on('peerName', function (idClient, nameClient){
  // document.getElementById(idClient+"showClientName").innerHTML = nameClient;  
  console.log("nama client "+ nameClient);
  if (isInitiator) {
    console.log("sending clientAll");
    clientDetail.push({"cI":idClient,"cN":nameClient});
    socket.emit("clientAll", room, clientDetail);
  }
});

socket.on('clientAll', function (allClientDetail){
  console.log("clientAll");
  console.log(allClientDetail);
  var addingListName= "";
  for (var i = 0; i < Object.keys(allClientDetail).length; i++) {
    if (allClientDetail[i].cI != myid) {
      addingListName += '<li>'+allClientDetail[i].cN+" <a onclick='checkChatPrivate(\""+allClientDetail[i].cI+"\",\""+allClientDetail[i].cN+"\"); return false;'>chat</a></li>";
    };
  };
  document.getElementById("listClient").innerHTML = addingListName;   
});

socket.on('Disconnect peer', function(peer){
  //menghapus klien yang disconnect dari list client yg dimiliki initiator
  if (isInitiator) {
    console.log(allclientid);
    peerout = peer;
    var i = allclientid.indexOf(peerout);
    if(i != -1) {
      allclientid.splice(i, 1);
    }
  
    handleRemoteHangup();
    $("#"+peerout).detach();
    socket.emit("numClient", room, (Object.keys(allclientid).length + 1));
    console.log(Object.keys(allclientid).length + 1);
    document.getElementById("jumlahClient").innerHTML = (Object.keys(allclientid).length + 1) + " User Online";   
  };  
});

socket.on('checking password', function (room, idreqpass){
  if(isInitiator){
    socket.emit("feedback password",passroomvalid,room,idreqpass);
    console.log("new client request password");
  };
});
  
socket.on('feedback password', function (pswrdori,idreqpass){
  console.log("origin "+pswrdori+" pss "+pswrd);
  if (myid = idreqpass) {
    if (pswrdori==pswrd) { StartRoom(); }
    else{ return;}  
  };
});

socket.on('allow created', function (room){
  StartRoom();
});

socket.on('idku', function (yourid){
  console.log("idku "+yourid);
  myid = yourid;
});
////////////////////////////////////////////////

socket.on('message', function (message){
  if (!isInitiator && !ClientConnect){
    PeerTarget1 = roomowner1;
    console.log("PeerTarget = roomowner1, room: " + PeerTarget1);
  };
  if (message === 'got user media' && !ClientConnect) {
    console.log('Received message:', message);
    maybeStart();
  } else if (message.type === 'offer' && !ClientConnect) {
    console.log('Received message:', message);
    if (!isInitiator && !isStarted) {
      maybeStart();
    }
    pc[PeerTarget1].setRemoteDescription(new RTCSessionDescription(message));
    doAnswer();
  } else if (message.type === 'answer' && isStarted && !ClientConnect) {
    console.log('Received message:', message);
    pc[PeerTarget1].setRemoteDescription(new RTCSessionDescription(message));
  } else if (message.type === 'candidate' && isStarted && !ClientConnect) {
    console.log('Received message:', message);
    var candidate = new RTCIceCandidate({sdpMLineIndex:message.label,candidate:message.candidate});
    pc[PeerTarget1].addIceCandidate(candidate);
    if (!isInitiator) {
      ClientConnect = true;
    }
  } /*else if (message === 'bye' && isStarted && isInitiator) {
      handleRemoteHangup();
    }*/
});

function handleUserMedia(stream) {
  localStream = stream;
  attachMediaStream(localVideo, stream);
  console.log('Adding local stream.');
  sendMessage('got user media');
  if (isInitiator) {
    maybeStart();
  }
}

function handleUserMediaError(error){
  console.log('getUserMedia error: ', error);
}

function sendMessage(message){
  console.log('Sending message: ', message);
  socket.emit('message', message, room);
}
function maybeStart() {
  if (!isStarted && localStream && isChannelReady) {
    console.log(isStarted + "," +isChannelReady);
  //if (!isStarted && isChannelReady) {
    console.log("maybestart tawwa untuk peertarget1 :" + PeerTarget1);
    createPeerConnection();
    pc[PeerTarget1].addStream(localStream);
    isStarted = true;
    if (isInitiator) {
      doCall();
    }
  }
}

window.onbeforeunload = function(e){
	//sendMessage('bye');
  if (isInitiator) {
    socket.emit('Disconnect peer', room, roomowner1);
  } else {
    socket.emit('Disconnect peer', room, myid);
  }
}

function sendData(data,typeSending,idDestination){
  console.log("destinasi pengiriman "+idDestination);
  switch (typeSending){
    case 'all':
      for (var i = 0; i < allclientid.length; i++) {
        if (allclientid[i] != idDestination) {
          sendChannel[allclientid[i]].send(data);  
        } 
      }
    break;
    case 'specific':
      sendChannel[idDestination].send(data); 
    break;
  }
};

/////////////////////////////////////////////////////////

function createPeerConnection() {
  console.log('createPeerConnection where the initiator is :'+ PeerTarget1);
  try {
    pc[PeerTarget1] = new RTCPeerConnection(pc_config, pc_constraints);
    pc[PeerTarget1].onicecandidate = handleIceCandidate;
    console.log('Created RTCPeerConnnection with:\n' +
      '  config: \'' + JSON.stringify(pc_config) + '\';\n' +
      '  constraints: \'' + JSON.stringify(pc_constraints) + '\'.');
  } catch (e) {
    console.log('Failed to create PeerConnection, exception: ' + e.message);
    alert('Cannot create RTCPeerConnection object.');
      return;
  }
  pc[PeerTarget1].onaddstream = handleRemoteStreamAdded;
  pc[PeerTarget1].onremovestream = handleRemoteStreamRemoved;

  if (isInitiator) {
    try {
      // Reliable Data Channels not yet supported in Chrome
      sendChannel[PeerTarget1] = pc[PeerTarget1].createDataChannel("sendDataChannel",
        {reliable: false});
      sendChannel[PeerTarget1].onmessage = handleMessage;
      trace('Created send data channel');
    } catch (e) {
      alert('Failed to create data channel. ' +
            'You need Chrome M25 or later with RtpDataChannel enabled');
      trace('createDataChannel() failed with exception: ' + e.message);
    }
    sendChannel[PeerTarget1].onopen = handleSendChannelStateChange;
    sendChannel[PeerTarget1].onclose = handleSendChannelStateChange;
  } else {
    pc[PeerTarget1].ondatachannel = gotReceiveChannel;
  }
}

function gotReceiveChannel(event) {
  trace('Receive Channel Callback');
  sendChannel[PeerTarget1] = event.channel;
  sendChannel[PeerTarget1].onmessage = handleMessage;
  sendChannel[PeerTarget1].onopen = handleReceiveChannelStateChange;
  sendChannel[PeerTarget1].onclose = handleReceiveChannelStateChange;
}

function handleMessage (event) {
  //console.log(event.data);
  var IncomeMessage = JSON.parse(event.data);
  var chatSending = false;
  //iconsole.log(IncomeMessage.type);
  //trace('Received message: ' + event.data);
  switch(IncomeMessage.type) {
    case 'LiveEditor':
      document.getElementById("LiveEditor"+IncomeMessage.sourcePesan).contentWindow.document.body.innerHTML =  IncomeMessage.pesan;
      onTyping(IncomeMessage.clientname);
      break;
    case 'LiveEditorFirst':
      LiveEditorArray += IncomeMessage.pesan;
      onTyping(IncomeMessage.clientname);
    break;
    case 'LiveEditorLast':
      document.getElementById("LiveEditor"+IncomeMessage.sourcePesan).contentWindow.document.body.innerHTML = LiveEditorArray;
      onTyping(IncomeMessage.clientname);
      LiveEditorArray = "";
    break;
    case 'NewDocument':
      var documentNameAr = JSON.parse(IncomeMessage.pesan);
      console.log(documentNameAr);
      for (var i = 0; i < Object.keys(documentNameAr).length; i++) {
        addDocument(documentNameAr[i]);
      }
    break;
    case 'deleteDocument':
      deleteDocument(IncomeMessage.pesan);
    break;
    case 'renameDocument':
      handleRenameDoc(IncomeMessage.docId,IncomeMessage.newName);
    break;
    case 'renameDocumentWhiteboard':
      handleRenameDocWhiteboard(IncomeMessage.docId,IncomeMessage.newName);
    break;
    case 'NewCanvas':
      var canvasNameAr = JSON.parse(IncomeMessage.pesan);
      console.log(canvasNameAr);
      for (var i = 0; i < Object.keys(canvasNameAr).length; i++) {
        addWhiteboard(canvasNameAr[i]);
      }
    break;
     case 'deleteCanvas':
      deleteDocumentWhiteboard(IncomeMessage.pesan);
    break;
    case 'canvasEditor':
      var canvasArray = JSON.parse(IncomeMessage.pesan);
      clickX[canvasArray.whiteboardId].push(canvasArray.clickX);
      clickY[canvasArray.whiteboardId].push(canvasArray.clickY);
      clickDrag[canvasArray.whiteboardId].push(canvasArray.clickDrag);
      clickSize[canvasArray.whiteboardId].push(canvasArray.clickSize);
      clickColor[canvasArray.whiteboardId].push(canvasArray.clickColor);
      redraw(canvasArray.whiteboardId);
      paint = false;
    break;
    case 'allDataCanvas':
      var canvasArray = JSON.parse(IncomeMessage.pesan);
      clickX[canvasArray.whiteboardId] = canvasArray.clickX;
      clickY[canvasArray.whiteboardId] = canvasArray.clickY;
      clickDrag[canvasArray.whiteboardId] = canvasArray.clickDrag;
      clickSize[canvasArray.whiteboardId] = canvasArray.clickSize;
      clickColor[canvasArray.whiteboardId] = (canvasArray.clickColor);
      redraw(canvasArray.whiteboardId);
      paint = false;
    break;
    case 'backCanvas':
      newBackCanvas(IncomeMessage.idCanvas, IncomeMessage.pesan);
    break;
    case 'backCanvasFirst':
      backCanvasArray[IncomeMessage.idCanvas] += IncomeMessage.pesan;
    break;
    case 'backCanvasLast':
      var str = backCanvasArray[IncomeMessage.idCanvas];
      var res = str.replace("undefined", "");
      newBackCanvas(IncomeMessage.idCanvas, res);
      //console.log("recenice last canvas data "+backCanvasArray[IncomeMessage.idCanvas]);
      backCanvasArray[IncomeMessage.idCanvas] = '';
      
    break;
    case 'clearCanvas':
      clearCanvas(IncomeMessage.pesan);
    break;
    case 'chatMessage':
        console.log("chat baru");
        if (IncomeMessage.targetId != "Public") {
          checkChatPrivate(IncomeMessage.idpesan,IncomeMessage.clientname,true);
          newchat(IncomeMessage.idpesan,IncomeMessage.pesan,IncomeMessage.clientname);
        } else {
          newchat(IncomeMessage.targetId,IncomeMessage.pesan,IncomeMessage.clientname);
        }

        if (isInitiator && IncomeMessage.targetId != myid) {
          if (IncomeMessage.targetId == "Public") {
            sendData(JSON.stringify(IncomeMessage),'all',IncomeMessage.idpesan);
          } else {
            sendData(JSON.stringify(IncomeMessage),'specific',IncomeMessage.targetId);
          }
        }
        break;
    case 'Presentation':
    break;

  }

  //jika Initiator menerima pesan, maka broadcast kesemua klien
  if (isInitiator && IncomeMessage.type != "chatMessage" && IncomeMessage.targetId != myid) {
    sendData(JSON.stringify(IncomeMessage),'all',IncomeMessage.idpesan);
  }
}

function handleSendChannelStateChange() {
  readyState[PeerTarget1] = sendChannel[PeerTarget1].readyState;
  trace('Send channel '+PeerTarget1+' state is: ' + readyState[PeerTarget1]);
  enableMessageInterface(readyState[PeerTarget1] == "open");
  if (isInitiator && readyState[PeerTarget1] != "closed") {
      allclientid.push(PeerTarget1);
      var aalDocuemnt = JSON.stringify({"pesan":JSON.stringify(documentArray), "idpesan": "", "type": 'NewDocument', "clientname":nama});
      var aalWiteboard = JSON.stringify({"pesan":JSON.stringify(whiteboardArray), "idpesan": "", "type": 'NewCanvas', "clientname":nama});
      sendData(aalDocuemnt,'specific',PeerTarget1);
      sendData(aalWiteboard,'specific',PeerTarget1);
      for (var i = 0; i < Object.keys(documentArray).length; i++) {
        sendDataLiveEditor(documentArray[i].docId);  
      }
      for (var i = 0; i < Object.keys(whiteboardArray).length; i++) {
        var MEditor = JSON.stringify({"clickX":clickX[whiteboardArray[i].docId], "clickY":clickY[whiteboardArray[i].docId], "clickDrag":clickDrag[whiteboardArray[i].docId], "clickSize":clickSize[whiteboardArray[i].docId], "clickColor":clickColor[whiteboardArray[i].docId], "whiteboardId":whiteboardArray[i].docId});
        var data = JSON.stringify({"pesan":MEditor, "idpesan": myid, "type": 'allDataCanvas'});
        sendData(data,'specific',PeerTarget1);

        //
        if (outlineImage[whiteboardArray[i].docId]) {
          sendBackCanvas(whiteboardArray[i].docId);
        };
        
      }

      socket.emit("numClient", room, (Object.keys(allclientid).length + 1));
      document.getElementById("jumlahClient").innerHTML = (Object.keys(allclientid).length + 1) + " User Online";  
      console.log("jumlah client "+(Object.keys(allclientid).length+1));    
  }
}

function handleReceiveChannelStateChange() {
  readyState[PeerTarget1] = sendChannel[PeerTarget1].readyState;
  trace('Receive channel '+PeerTarget1+' state is: ' + readyState[PeerTarget1]);
  enableMessageInterface(readyState[PeerTarget1] == "open");
}

function enableMessageInterface(shouldEnable) {
  if (shouldEnable) {
    //receiveTextarea.contentWindow.document.designMode="on";
    //sendButton.disabled = false;
    if (!isInitiator) {
      socket.emit("peerName", room, myid, nama);
    };
    
  } else {
    //dataChannelSend.disabled = true;
    //sendButton.disabled = true;
  }
}

function handleIceCandidate(event) {
  console.log('handleIceCandidate event: ', event);
  if (event.candidate) {
    sendMessage({
      type: 'candidate',
      label: event.candidate.sdpMLineIndex,
      id: event.candidate.sdpMid,
      candidate: event.candidate.candidate});
  } else {
    console.log('End of candidates.');
  }
}

function doCall() {
  var constraints = {'optional': [], 'mandatory': {'MozDontOfferDataChannel': true}};
  // temporary measure to remove Moz* constraints in Chrome
  if (webrtcDetectedBrowser === 'chrome') {
    for (var prop in constraints.mandatory) {
      if (prop.indexOf('Moz') !== -1) {
        delete constraints.mandatory[prop];
      }
     }
   }
  constraints = mergeConstraints(constraints, sdpConstraints);
  console.log('Sending offer to peer, with constraints: \n' +
    '  \'' + JSON.stringify(constraints) + '\'.');
  pc[PeerTarget1].createOffer(setLocalAndSendMessage, null, constraints);
}

function doAnswer() {
  console.log('Sending answer to peer.');
  pc[PeerTarget1].createAnswer(setLocalAndSendMessage, null, sdpConstraints);
}

function mergeConstraints(cons1, cons2) {
  var merged = cons1;
  for (var name in cons2.mandatory) {
    merged.mandatory[name] = cons2.mandatory[name];
  }
  merged.optional.concat(cons2.optional);
  return merged;
}

function setLocalAndSendMessage(sessionDescription) {
  // Set Opus as the preferred codec in SDP if Opus is present.
  sessionDescription.sdp = preferOpus(sessionDescription.sdp);
  pc[PeerTarget1].setLocalDescription(sessionDescription);
  console.log("set local an send message: " +sessionDescription);
  sendMessage(sessionDescription);
}

function requestTurn(turn_url) {
  var turnExists = false;
  for (var i in pc_config.iceServers) {
    if (pc_config.iceServers[i].url.substr(0, 5) === 'turn:') {
      turnExists = true;
      turnReady = true;
      break;
    }
  }
  if (!turnExists) {
    
    var xhr = new XMLHttpRequest();
    xhr.onreadystatechange = function(){
      if (xhr.readyState === 4 && xhr.status === 200) {
        var turnServer = JSON.parse(xhr.responseText);
      	console.log('Got TURN server: ', turnServer);
        pc_config.iceServers.push({
          'url': 'turn:' + turnServer.username + '@' + turnServer.turn,
          'credential': turnServer.password
        });
        turnReady = true;
      }
    };
    
    var currentDomain = document.domain;
    if (currentDomain==='localhost') {
      console.log('Getting TURN server from ', currentDomain);
      // Not authorized domain. Try with default STUN instead.
      turnReady = true;
      return;
    } else {
      console.log('Getting TURN server from ', turn_url);
      // No TURN server. Get one from computeengineondemand.appspot.com:
    }

    //xhr.open('GET', turn_url, true);
    //xhr.send();
    
  }
}

function requestTurnAjax(turn_url) {
  var turnExists = false;
  for (var i in pc_config.iceServers) {
    if (pc_config.iceServers[i].url.substr(0, 5) === 'turn:') {
      turnExists = true;
      turnReady = true;
      break;
    }
  }
  console.log("coba");
 // if (!turnExists) {
    $.ajax({
        url: 'http://www.terokunusantara.com',
        data: {},
        type: 'GET',
        crossDomain: true,
        dataType: 'jsonp',
        success: function(msg) { 
          var turnServer = JSON.parse(msg.responseText);
          console.log('Got TURN server: ', turnServer);
          pc_config.iceServers.push({
            'url': 'turn:' + turnServer.username + '@' + turnServer.turn,
            'credential': turnServer.password
          });
          turnReady = true;
        },
        error: function() { alert('Failed!'); },

    });
  //}
}

function mute(targetMute){
  if($("#muteButton"+targetMute).hasClass("mute")){
      $("#muteButton"+targetMute).removeClass("mute");
      document.getElementById("client"+targetMute).muted = false;
      console.log(targetMute+" mute");
    } else {
      $("#muteButton"+targetMute).addClass("mute");
      document.getElementById("client"+targetMute).muted = true;
      console.log(targetMute+" unmute");
    }
}
function handleRemoteStreamAdded(event) {
  console.log('Remote stream added.');
  if (isInitiator) {
    $("#client-vid").append("<div id='"+PeerTarget1+"' class='small-vid'><div class='smallvid'><a onclick='mute(\""+PeerTarget1+"\")' class='pointer' id='aButton"+PeerTarget1+"'><img id='muteButton"+PeerTarget1+"' src='img/mic.png' class='microphone mute'></a><video id='client"+PeerTarget1+"' autoplay muted width='100%'></div><div class='username-con small'><div id='"+PeerTarget1+"showClientName' class='username-small overlay'>Name disini</div></div></div>");
  } else {
    $("#client-vid").append("<div id='"+PeerTarget1+"' class='small-vid'><div class='smallvid'><a onclick='mute(\""+PeerTarget1+"\")' class='pointer' id='aButton"+PeerTarget1+"'><img id='muteButton"+PeerTarget1+"' src='img/mic.png' class='microphone'></a><video id='client"+PeerTarget1+"' autoplay width='100%'></div><div class='username-con small'><div id='"+PeerTarget1+"showClientName' class='username-small overlay'>Name disini</div></div></div>");
  }
   
  var remoteVideo = document.getElementById("client"+PeerTarget1);
 // reattachMediaStream(miniVideo, localVideo);
  attachMediaStream(remoteVideo, event.stream);
  remoteStream = event.stream;
//  waitForRemoteVideo();
}
function handleRemoteStreamRemoved(event) {
  console.log('Remote stream removed. Event: ', event);
}

function hangup() {
  console.log('Hanging up.');
  stop();
  sendMessage('bye');
}

function handleRemoteHangup() {
  console.log(peerout +' Session terminated.');
  stop();
  //isInitiator = false;
}

function stop() {
  //isStarted = false;
  // isAudioMuted = false;
  // isVideoMuted = false;
  console.log ('peer outnya: ' +peerout);
  pc[peerout].close();
  pc[peerout] = null;
}

///////////////////////////////////////////

// Set Opus as the default audio codec if it's present.
function preferOpus(sdp) {
  var sdpLines = sdp.split('\r\n');
  var mLineIndex;
  // Search for m line.
  for (var i = 0; i < sdpLines.length; i++) {
      if (sdpLines[i].search('m=audio') !== -1) {
        mLineIndex = i;
        break;
      }
  }
  if (mLineIndex === null) {
    return sdp;
  }

  // If Opus is available, set it as the default in m line.
  for (i = 0; i < sdpLines.length; i++) {
    if (sdpLines[i].search('opus/48000') !== -1) {
      var opusPayload = extractSdp(sdpLines[i], /:(\d+) opus\/48000/i);
      if (opusPayload) {
        sdpLines[mLineIndex] = setDefaultCodec(sdpLines[mLineIndex], opusPayload);
      }
      break;
    }
  }

  // Remove CN in m line and sdp.
  sdpLines = removeCN(sdpLines, mLineIndex);

  sdp = sdpLines.join('\r\n');
  return sdp;
}

function extractSdp(sdpLine, pattern) {
  var result = sdpLine.match(pattern);
  return result && result.length === 2 ? result[1] : null;
}

// Set the selected codec to the first in m line.
function setDefaultCodec(mLine, payload) {
  var elements = mLine.split(' ');
  var newLine = [];
  var index = 0;
  for (var i = 0; i < elements.length; i++) {
    if (index === 3) { // Format of media starts from the fourth.
      newLine[index++] = payload; // Put target payload to the first.
    }
    if (elements[i] !== payload) {
      newLine[index++] = elements[i];
    }
  }
  return newLine.join(' ');
}

// Strip CN from sdp before CN constraints is ready.
function removeCN(sdpLines, mLineIndex) {
  var mLineElements = sdpLines[mLineIndex].split(' ');
  // Scan from end for the convenience of removing an item.
  for (var i = sdpLines.length-1; i >= 0; i--) {
    var payload = extractSdp(sdpLines[i], /a=rtpmap:(\d+) CN\/\d+/i);
    if (payload) {
      var cnPos = mLineElements.indexOf(payload);
      if (cnPos !== -1) {
        // Remove CN payload from m line.
        mLineElements.splice(cnPos, 1);
      }
      // Remove CN line in sdp
      sdpLines.splice(i, 1);
    }
  }

  sdpLines[mLineIndex] = mLineElements.join(' ');
  return sdpLines;
}

function htmlEntities(str) {
    return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
}

function DecodehtmlEntities(str) {
    return String(str).replace(/&amp;/g, '&').replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '"');
}